// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Â MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Create as $Create } from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as drivers$0 from "../../gitlab.com/gomidi/midi/v2/drivers/models.js";

export class Color {
    /**
     * Creates a new Color instance.
     * @param {Partial<Color>} [$$source = {}] - The source object to create the Color.
     */
    constructor($$source = {}) {
        if (!("label" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["label"] = "";
        }
        if (!("color" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["color"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Color instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Color}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Color(/** @type {Partial<Color>} */($$parsedSource));
    }
}

export class Config {
    /**
     * Creates a new Config instance.
     * @param {Partial<Config>} [$$source = {}] - The source object to create the Config.
     */
    constructor($$source = {}) {
        if (!("colors" in $$source)) {
            /**
             * @member
             * @type {{ [_: string]: Color }}
             */
            this["colors"] = {};
        }
        if (!("keyLabel" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["keyLabel"] = "";
        }
        if (!("keyboardType" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["keyboardType"] = 0;
        }
        if (!("velocity" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["velocity"] = 0;
        }
        if (!("opacity" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["opacity"] = 0;
        }
        if (!("version" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["version"] = "";
        }
        if (!("showPedal" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["showPedal"] = false;
        }
        if (!("volume" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["volume"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Config instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Config}
     */
    static createFrom($$source = {}) {
        const $$createField0_0 = $$createType1;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("colors" in $$parsedSource) {
            $$parsedSource["colors"] = $$createField0_0($$parsedSource["colors"]);
        }
        return new Config(/** @type {Partial<Config>} */($$parsedSource));
    }
}

export class InMidiDevice {
    /**
     * Creates a new InMidiDevice instance.
     * @param {Partial<InMidiDevice>} [$$source = {}] - The source object to create the InMidiDevice.
     */
    constructor($$source = {}) {
        if (!("device" in $$source)) {
            /**
             * @member
             * @type {drivers$0.In}
             */
            this["device"] = null;
        }
        if (!("name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["name"] = "";
        }
        if (!("value" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["value"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new InMidiDevice instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {InMidiDevice}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new InMidiDevice(/** @type {Partial<InMidiDevice>} */($$parsedSource));
    }
}

export class MidiDevices {
    /**
     * Creates a new MidiDevices instance.
     * @param {Partial<MidiDevices>} [$$source = {}] - The source object to create the MidiDevices.
     */
    constructor($$source = {}) {
        if (!("inMidiPool" in $$source)) {
            /**
             * @member
             * @type {{ [_: `${number}`]: InMidiDevice }}
             */
            this["inMidiPool"] = {};
        }
        if (!("outMidiPool" in $$source)) {
            /**
             * @member
             * @type {{ [_: `${number}`]: OutMidiDevice }}
             */
            this["outMidiPool"] = {};
        }
        if (!("selectedInDevice" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["selectedInDevice"] = 0;
        }
        if (!("selectedOutDevice" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["selectedOutDevice"] = 0;
        }
        if (!("pedalStatus" in $$source)) {
            /**
             * @member
             * @type {{ [_: `${number}`]: PedalSingal | null }}
             */
            this["pedalStatus"] = {};
        }
        if (!("initialized" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["initialized"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new MidiDevices instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {MidiDevices}
     */
    static createFrom($$source = {}) {
        const $$createField0_0 = $$createType3;
        const $$createField1_0 = $$createType5;
        const $$createField4_0 = $$createType8;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("inMidiPool" in $$parsedSource) {
            $$parsedSource["inMidiPool"] = $$createField0_0($$parsedSource["inMidiPool"]);
        }
        if ("outMidiPool" in $$parsedSource) {
            $$parsedSource["outMidiPool"] = $$createField1_0($$parsedSource["outMidiPool"]);
        }
        if ("pedalStatus" in $$parsedSource) {
            $$parsedSource["pedalStatus"] = $$createField4_0($$parsedSource["pedalStatus"]);
        }
        return new MidiDevices(/** @type {Partial<MidiDevices>} */($$parsedSource));
    }
}

export class OutMidiDevice {
    /**
     * Creates a new OutMidiDevice instance.
     * @param {Partial<OutMidiDevice>} [$$source = {}] - The source object to create the OutMidiDevice.
     */
    constructor($$source = {}) {
        if (!("name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["name"] = "";
        }
        if (!("value" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["value"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new OutMidiDevice instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {OutMidiDevice}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new OutMidiDevice(/** @type {Partial<OutMidiDevice>} */($$parsedSource));
    }
}

export class PedalSingal {
    /**
     * Creates a new PedalSingal instance.
     * @param {Partial<PedalSingal>} [$$source = {}] - The source object to create the PedalSingal.
     */
    constructor($$source = {}) {
        if (!("deviceID" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["deviceID"] = 0;
        }
        if (!("damperPedal" in $$source)) {
            /**
             * 延音踏板 64
             * @member
             * @type {boolean}
             */
            this["damperPedal"] = false;
        }
        if (!("sostenutoPedal" in $$source)) {
            /**
             * 消音踏板 66
             * @member
             * @type {boolean}
             */
            this["sostenutoPedal"] = false;
        }
        if (!("softPedal" in $$source)) {
            /**
             * 柔音踏板 67
             * @member
             * @type {boolean}
             */
            this["softPedal"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new PedalSingal instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {PedalSingal}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new PedalSingal(/** @type {Partial<PedalSingal>} */($$parsedSource));
    }
}

// Private type creation functions
const $$createType0 = Color.createFrom;
const $$createType1 = $Create.Map($Create.Any, $$createType0);
const $$createType2 = InMidiDevice.createFrom;
const $$createType3 = $Create.Map($Create.Any, $$createType2);
const $$createType4 = OutMidiDevice.createFrom;
const $$createType5 = $Create.Map($Create.Any, $$createType4);
const $$createType6 = PedalSingal.createFrom;
const $$createType7 = $Create.Nullable($$createType6);
const $$createType8 = $Create.Map($Create.Any, $$createType7);
